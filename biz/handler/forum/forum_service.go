// Code generated by hertz generator.

package forum

import (
	"context"

	"github.com/mutezebra/forum/pkg/pack"
	"github.com/mutezebra/forum/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	forum "github.com/mutezebra/forum/biz/model/forum"
)

// GetThreads .
// @router /api/forum/get-threads [POST]
func GetThreads(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.GetThreadsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(forum.GetThreadsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetPosts .
// @router /api/forum/get-posts [POST]
func GetPosts(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.GetPostsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(forum.GetPostsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetComments .
// @router /api/forum/get-comments [POST]
func GetComments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.GetCommentsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(forum.GetCommentsResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateThread .
// @router /api/forum/create-thread [POST]
func CreateThread(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.CreateThreadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var resp *forum.CreateThreadResp
	resp, err = service.GetService().CreateThread(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CreatePost .
// @router /api/forum/create-post [POST]
func CreatePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.CreatePostReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(forum.CreatePostResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateComment .
// @router /api/forum/create-comment [POST]
func CreateComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req forum.CreateCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(forum.CreateCommentResp)

	c.JSON(consts.StatusOK, resp)
}
